#!/usr/bin/env bash
#
# Summary: Migrate pip packages from a Python version to another
#
# Usage: pyenv migrate <from> <to>
#

set -e
[ -n "$PYENV_DEBUG" ] && set -x

# Provide pyenv completions
if [ "$1" = "--complete" ]; then
  exec pyenv-versions --bare
fi

if [ -z "$PYENV_ROOT" ]; then
  PYENV_ROOT="${HOME}/.pyenv"
fi

usage() {
  # We can remove the sed fallback once pyenv 0.2.0 is widely available.
  pyenv-help migrate 2>/dev/null || sed -ne '/^#/!q;s/.//;s/.//;1,4d;p' < "$0"
  [ -z "$1" ] || exit "$1"
}

migration_failed() {
  { echo
    echo "MIGRATION FAILED"
    echo
    echo "Inspect or clean up the package list at ${PIP_REQUIREMENTS}"
  } 1>&2
  exit 1
}

src="$1"
dst="$2"
[ -n "$src" ] || usage 1
[ -n "$dst" ] || usage 1

pyenv-prefix "$src" 1>/dev/null 2>&1 || {
  echo "pyenv: not an installed version: $src" 1>&2
  usage 1
}

pyenv-prefix "$dst" 1>/dev/null 2>&1 || {
  echo "pyenv: not an installed version: $dst" 1>&2
  usage 1
}

if [ -z "$TMPDIR" ]; then
  TMP="/tmp"
else
  TMP="${TMPDIR%/}"
fi

SEED="$(date "+%Y%m%d%H%M%S").$$"
LOG_PATH="${TMP}/python-build.${SEED}.log"
PIP_REQUIREMENTS="${TMP}/requirements.${SEED}.txt"

trap migration_failed ERR
# Run Pip via -m as a workaround to reduce breakage from https://github.com/pyenv/pyenv/issues/2417
PYENV_VERSION="${src}" pyenv-exec python -m pip freeze >> "${PIP_REQUIREMENTS}"
PYENV_VERSION="${dst}" pyenv-exec python -m pip install --requirement "${PIP_REQUIREMENTS}"
pyenv-rehash
rm -f "${PIP_REQUIREMENTS}"
trap - ERR
